# receive all logs from docker via fluent-logdriver
<source>
  @type forward
  port 24224
  bind 0.0.0.0
  tag docker.stdout
</source>

# ------------------------- generic ------------------------- #

# copy log field to message field
<filter docker.**>
  @type record_transformer
  <record>
    message ${record["log"]}
  </record>
</filter>

# write part of container name to service field
<filter docker.**>
  @type parser
  format /.+_(?<service>[^_]+)_\d$/
  key_name container_name
  reserve_data true
</filter>

# remove starting / from container name
<filter docker.**>
  @type parser
  format /\/(?<container_name>.+)$/
  key_name container_name
  reserve_data true
</filter>

# ------------------------- split container logs ------------------------- #

# rewrite tags based on service name
# needs to happen within one match block as non matching results will be discarded
# resulting in tags: domain.<service>, mongodb, frontend
<match docker.**>
  @type rewrite_tag_filter
  <rule>
    key service
    pattern ^(image.+)$
    tag domain.$1
  </rule>
  <rule>
    key service
    pattern ^(mongodb)$
    tag $1
  </rule>
  <rule>
    key service
    pattern ^(frontend)$
    tag $1
  </rule>
</match>


# ------------------------- handle domain service logs ------------------------- #

# parse log field as json
<filter domain.*>
  @type parser
  format json
  key_name log
  reserve_data true
</filter>

# remove tag field & log field (it is either in message now or parsed)
<filter domain.*>
  @type record_transformer
  remove_keys log,tag
</filter>

# ------------------------- split domain services' events ------------------------- #

# reroute image* services' events to domain.<service>.event
# field logger_name is set to event in case of event, others are set to the class
<match domain.*>
  @type rewrite_tag_filter
  <rule>
    key logger_name
    pattern ^(.+)$
    tag ${tag}.$1
  </rule>
</match>

# ------------------------- outputs ------------------------- #

# send all logs from fluentd itself to their own index "fluent"
<match fluent.**>
  @type                 elasticsearch
  host                  elasticsearch
  port                  9200
  user                  elastic
  password              changeme
  logstash_format       true
  logstash_prefix       fluent
  logstash_dateformat   %Y.%m.%d
  include_tag_key       true
  type_name             log
  tag_key               @tag
  <buffer>
    flush_interval      1s
    flush_thread_count  2
  </buffer>
</match>

# send all domain events to their own index "events"
<match domain.*.event>
  @type                 elasticsearch
  host                  elasticsearch
  port                  9200
  user                  elastic
  password              changeme
  logstash_format       true
  logstash_prefix       events
  logstash_dateformat   %Y.%m.%d
  include_tag_key       true
  type_name             event
  tag_key               @tag
  <buffer>
    flush_interval      1s
    flush_thread_count  2
  </buffer>
</match>

<match domain.*.** mongodb frontend>
  @type copy
  # send all remaining logs from the domain services, mongodb and frontend to "logs"
  <store>
    @type                 elasticsearch
    host                  elasticsearch
    port                  9200
    user                  elastic
    password              changeme
    logstash_format       true
    logstash_prefix       logs
    logstash_dateformat   %Y.%m.%d
    include_tag_key       true
    type_name             log
    tag_key               @tag
    <buffer>
      flush_interval      1s
      flush_thread_count  2
    </buffer>
  </store>
  # also send those logs to loki
  <store>
    @type               loki
    url                 "http://loki:3100"
    flush_interval      10s
    flush_at_shutdown   true
    buffer_chunk_limit  1m
    # we have to explicitly add all the labels at this point which is really unfortunate
    <label>
      service
    </label>
    <label>
      message
    </label>
    <label>
      level
    </label>
    <label>
      mimeType
    </label>
    <label>
      traceId
    </label>
    <label>
      spanId
    </label>
    <label>
      imageId
    </label>
    <label>
      imageName
    </label>
    <label>
      logger_name
    </label>
    <label>
      event.id
    </label>
  </store>
</match>

# catch all for any potential unmatched logs
<match **.**>
  @type                 elasticsearch
  host                  elasticsearch
  port                  9200
  user                  elastic
  password              changeme
  logstash_format       true
  logstash_prefix       unmatched
  logstash_dateformat   %Y.%m.%d
  include_tag_key       true
  type_name             log
  tag_key               @tag
  <buffer>
    flush_interval      1s
    flush_thread_count  2
  </buffer>
</match>
